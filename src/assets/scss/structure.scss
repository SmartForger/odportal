// STRUCTURE
// @import "../node_modules/material-components-web/material-components-web.scss";
@import "~@material/ripple/mixins";
@import "~@material/theme/variables";

@import "~@material/list/mdc-list";
@import "~@material/drawer/mdc-drawer";
@import "~@material/icon-button/mdc-icon-button";
@import "~@material/chips/mdc-chips";
// @import "~@material/dialog/mdc-dialog";
// @import "~@material/tab-bar/mdc-tab-bar";
// @import "~@material/tab-scroller/mdc-tab-scroller";
// @import "~@material/tab-indicator/mdc-tab-indicator";
// @import "~@material/tab/mdc-tab";

											@import "~@material/menu-surface/mdc-menu-surface";
											@import "~@material/menu/mdc-menu";

// $mdc-theme-primary: #FEDBD0;
// $mdc-theme-on-primary: #442C2E;
// $mdc-theme-secondary: #FEEAE6;
// $mdc-theme-on-secondary: #442C2E;
$mdc-theme-surface: #222f3e;
$mdc-theme-on-surface: #fff;
// $mdc-theme-background: #FFFFFF;
// $mdc-theme-on-background: #442C2E;

// @import "~@material/layout-grid/mdc-layout-grid";
// @import "~@material/typography/mixins";

// @import "~@material/menu/mdc-menu";

// @import "../../../node-modules/material-components-web/material-components-web.scss";

// @import "~@material/button/mdc-button";
// @import "~@material/textfield/mdc-text-field";
// @import "~@material/select/mdc-select";
// @import "~@material/menu-surface/mdc-menu-surface";
// @import "~@material/chips/mdc-chips";

// $sidebar-width: 260px;

// $mdc-drawer-title-ink-color: mdc-theme-prop-value(on-surface);
// $mdc-drawer-subtitle-ink-color: mdc-theme-prop-value(on-surface);
// $mdc-drawer-surface-fill-color: mdc-theme-prop-value(surface);
// $mdc-theme-primary: #880e4f;
// $mdc-typography-font-family: unquote("Times New Roman, sans-serif");


// $mdc-typography-styles-button: (
 // font-size: 14px,
 // font-weight: bold,
// );
// $mdc-typography-styles-headline6: (
//  font-size: 20px,
// );
// $mdc-shape-small-component-radius: 16px;
// $sidebar-background-color: $primary-color;
$primary-color: #222f3e;

body {
	margin: 0;
	padding: 0;
	width: 100%;
	height: 100%;
	background: #efefef;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
}

a {
	color: $primary-color;
}

$mdc-drawer-width: 230px;

// ADJUST BY VAR
.mdc-drawer {
	padding: 0 5px;
}
.mdc-drawer__header {
	min-height: 0;
}
app-sidebar-logo {
	margin: 0 50px 0 -25px;
	padding-top: 20px;
	display: block;
}

// SIDEBAR/MAIN LAYOUT
#sidebar {
	position: fixed;
	background-color: $mdc-theme-surface; // redeclaring shouldn't be necessary -- to investigate

	a, i {
		color: rgba($mdc-theme-on-surface, 0.5); // redeclaring shouldn't be necessary -- to investigate		
		font-weight: 400;
	
		&:hover,
		&.active,
		&:hover i {
			color: $mdc-theme-on-surface; // redeclaring shouldn't be necessary -- to investigate		
		}
	}


	img {
		display: inline-block;
		height: auto;
		max-width: 25px;
		max-height: 25px;
		margin-right: 30px;
	}
}

#main-content {
	box-sizing: border-box;
	padding: 30px 90px;
	margin-left: $mdc-drawer-width; // this and other properties should have an alternative in MCW -- to investigate
	width: calc(100% - 230px); // should be $mdc-drawer-width var but doesn't output
	height: 100%;
}

.content-body {
	border-radius: 3px;
	padding: 30px 60px;
	margin-bottom: 30px;
	background: #fff;
}

// GRIDSTERRRR
.gridster-bg-view-mode {

	&.fit {
		padding: 0 !important; // override inline
		margin: 60px 10px;
		background: transparent;
	}
}

.display-none {
	display: none !important; 
}

.display-block {
	display: block !important;
}

.display-inline {
	display: inline !important;
}

.display-inline-block {
	display: inline-block !important;
}

.mdc-list-item__graphic {
	margin-right: 15px; // update with vars instead
}
:not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item--activated::before,
:not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item--activated::after {
	background: #ccc5c5; // update with vars instead
}

// BREADCRUMBS
.breadcrumbs {
	margin: 0;
	padding: 0;
	list-style: none;
	font-size: 12px;

	li {
		display: inline-block;

		a {
			display: block;
			margin-right: 10px;
		}
	}
}

// TABLES
.table {
	width: 100%;
	border-collapse: collapse;

	th {
		font-size: 12px;
		font-weight: bold;
		text-align: left;
		padding: 15px 10px;
	}

	tr {
		border-bottom: 1px solid #ddd; // replace with var
	}

	tbody tr {

		&:hover {
			background: rgba(#efefef, 0.2); // replace with var
		}

		&:last-child {
			border: none;
		}
	}

	td {
		padding: 10px;
	}
}

.widget-title { // refactor with h3 and material components
	padding: 10px;
	font-size: 12px;
	font-weight: 500;
}


// SPACING HELPERS
// Refactor as sass if for
.margin-0 {
	margin: 0;
}

.mt-0 {
	margin-top: 0;
}
.mt-1 {
	margin-top: 10px;
}

.mt-2 {
	margin-top: 20px;
}

.mt-3 {
	margin-top: 30px;
}

.mb-0 {
	margin-bottom: 0;
}

.mb-1 {
	margin-bottom: 10px;
}

.mb-2 {
	margin-bottom: 20px;
}

.mb-3 {
	margin-bottom: 30px;
}

.mb-6 {
	margin-bottom: 60px;
}

.mr-1 {
	margin-right: 10px;
}
.mr-2 {
	margin-right: 20px;	
}
.mr-3 {
	margin-right: 30px;
}

.m-1 {
	margin: 10px;
}

.m-2 {
	margin: 20px;
}

.m-3 {
	margin: 30px;
}


.rounded {
	border-radius: 50%;
}

.mdc-chip-set {
	padding: 0; // use var instead
}
.mdc-chip {
	font-size: 12px; // use var instead
}
.mdc-chip,
.mdc-chip-set {
	display: inline-block; // correct at mdc-chips level instead
}

// refactor color application
.bg-green .mdc-chip {
	background-color: rgba(#0aa649, 0.1);
}
.bg-red .mdc-chip {
	background-color: rgba(#c60505, 0.1);
}

.color-green {
	color: #0aa649;
}
.color-red {
	color: #c60505;
}






























// Global
// @import "_global/fonts"; // font imports
// @import "_global/variables"; // default system variables
// @import "_global/helpers"; // mixins, extends, helpers
// @import "_global/resets"; // overriding base theme
// @import "_global/xl-bootstrap"; // overriding base theme
// // Atoms (Elements)
// @import "atoms/buttons";
// @import "atoms/dropdowns";
// @import "atoms/checkboxes";
// @import "atoms/icons";
// @import "atoms/inputs";
// @import "atoms/links";
// @import "atoms/list-items";
// @import "atoms/tables";
// @import "atoms/text";
// @import "atoms/titles";
// @import "atoms/alerts";
// @import "atoms/tooltips";
// @import "atoms/file-upload";
// @import "atoms/progress-bar";
// // Molecules (Components)
// @import "molecules/breadcrumbs";
// @import "molecules/cards";
// @import "molecules/forms";
// @import "molecules/modals";
// @import "molecules/navigation";
// @import "molecules/navigation-widgets";
// @import "molecules/search";
// @import "molecules/slideout";
// @import "molecules/slideout-hover";
// @import "molecules/tabs";
// @import "molecules/tooltips";
// @import "molecules/pagination";
// // Organisms (Grouped Components)
// @import "organisms/footer";
// @import "organisms/feedback";
// @import "organisms/calendar";
// @import "organisms/ui-guide";
// @import "organisms/bootstrapper";
// @import "organisms/dashboard";
// @import "organisms/loading";
// @import "organisms/widgets";
// @import "organisms/gridster";

// // Widgets
// @import "widgets/alert";   
// @import "widgets/notifications"; 

// // Skin
// // Refactor skin imports to only apply colors/styles for that skin on top of the above. That way our skin packages are very light and specific to that display
// @import "skins/light";
// @import "skins/dark";
// @import "skins/contrast";
// // @import "skins/other"'

